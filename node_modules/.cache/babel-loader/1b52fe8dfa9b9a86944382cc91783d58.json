{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar context_1 = require(\"./context\");\n/**\n * withLDConsumer is a function which accepts an optional options object and returns a function\n * which accepts your React component. This function returns a HOC with flags\n * and the ldClient instance injected via props.\n *\n * @param options - If you need only the `ldClient` instance and not flags, then set `{ clientOnly: true }`\n * to only pass the ldClient prop to your component. Defaults to `{ clientOnly: false }`.\n * @return A HOC with flags and the `ldClient` instance injected via props\n */\n\n\nfunction withLDConsumer(options) {\n  if (options === void 0) {\n    options = {\n      clientOnly: false\n    };\n  }\n\n  return function withLDConsumerHoc(WrappedComponent) {\n    return function (props) {\n      return React.createElement(context_1.Consumer, null, function (_a) {\n        var flags = _a.flags,\n            ldClient = _a.ldClient;\n\n        if (options.clientOnly) {\n          return React.createElement(WrappedComponent, __assign({\n            ldClient: ldClient\n          }, props));\n        }\n\n        return React.createElement(WrappedComponent, __assign({\n          flags: flags,\n          ldClient: ldClient\n        }, props));\n      });\n    };\n  };\n}\n\nexports.default = withLDConsumer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AAgCA;;;;;;;;;;;AASA,SAASA,cAAT,CAAwBC,OAAxB,EAAwE;EAAhD;IAAAA;MAA6BC,UAAU,EAAE;IAAzC;EAAgD;;EACtE,OAAO,SAASC,iBAAT,CAA8BC,gBAA9B,EAAgF;IACrF,OAAO,UAACC,KAAD,EAAS;MAAK,OACnBC,oBAACC,kBAAD,EAAS,IAAT,EACG,UAACC,EAAD,EAA+B;YAA5BC,KAAK;YAAEC,QAAQ;;QACjB,IAAIT,OAAO,CAACC,UAAZ,EAAwB;UACtB,OAAOI,oBAACF,gBAAD,EAAiBO;YAACD,QAAQ,EAAEA;UAAX,GAAyBL,KAAzB,CAAjB,CAAP;QACD;;QAED,OAAOC,oBAACF,gBAAD,EAAiBO;UAACF,KAAK,EAAEA,KAAR;UAAeC,QAAQ,EAAEA;QAAzB,GAAuCL,KAAvC,CAAjB,CAAP;MACD,CAPH,CADmB;IAUpB,CAVD;EAWD,CAZD;AAaD;;AAEDO,kBAAeZ,cAAf","names":["withLDConsumer","options","clientOnly","withLDConsumerHoc","WrappedComponent","props","React","context_1","_a","flags","ldClient","__assign","exports"],"sources":["/Users/tpat/Desktop/launchdarkly/node_modules/launchdarkly-react-client-sdk/src/withLDConsumer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Consumer, LDContext } from './context';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\n\n/**\n * Controls the props the wrapped component receives from the `LDConsumer` HOC.\n */\nexport interface ConsumerOptions {\n  /**\n   * If true then the wrapped component only receives the `ldClient` instance\n   * and nothing else.\n   */\n  clientOnly: boolean;\n}\n\n/**\n * The possible props the wrapped component can receive from the `LDConsumer` HOC.\n */\nexport interface LDProps {\n  /**\n   * A map of feature flags from their keys to their values.\n   * Keys are camelCased using `lodash.camelcase`.\n   */\n  flags?: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`)\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n}\n\n/**\n * withLDConsumer is a function which accepts an optional options object and returns a function\n * which accepts your React component. This function returns a HOC with flags\n * and the ldClient instance injected via props.\n *\n * @param options - If you need only the `ldClient` instance and not flags, then set `{ clientOnly: true }`\n * to only pass the ldClient prop to your component. Defaults to `{ clientOnly: false }`.\n * @return A HOC with flags and the `ldClient` instance injected via props\n */\nfunction withLDConsumer(options: ConsumerOptions = { clientOnly: false }) {\n  return function withLDConsumerHoc<P>(WrappedComponent: React.ComponentType<P & LDProps>) {\n    return (props: P) => (\n      <Consumer>\n        {({ flags, ldClient }: LDContext) => {\n          if (options.clientOnly) {\n            return <WrappedComponent ldClient={ldClient} {...props} />;\n          }\n\n          return <WrappedComponent flags={flags} ldClient={ldClient} {...props} />;\n        }}\n      </Consumer>\n    );\n  };\n}\n\nexport default withLDConsumer;\n"]},"metadata":{},"sourceType":"script"}