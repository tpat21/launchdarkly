{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchFlags = exports.getFlattenedFlagsFromChangeset = exports.camelCaseKeys = void 0;\n\nvar lodash_camelcase_1 = __importDefault(require(\"lodash.camelcase\"));\n\nvar types_1 = require(\"./types\");\n/**\n * Transforms a set of flags so that their keys are camelCased. This function ignores\n * flag keys which start with `$`.\n *\n * @param rawFlags A mapping of flag keys and their values\n * @return A transformed `LDFlagSet` with camelCased flag keys\n */\n\n\nvar camelCaseKeys = function (rawFlags) {\n  var flags = {};\n\n  for (var rawFlag in rawFlags) {\n    // Exclude system keys\n    if (rawFlag.indexOf('$') !== 0) {\n      flags[(0, lodash_camelcase_1.default)(rawFlag)] = rawFlags[rawFlag]; // tslint:disable-line:no-unsafe-any\n    }\n  }\n\n  return flags;\n};\n\nexports.camelCaseKeys = camelCaseKeys;\n/**\n * Gets the flags to pass to the provider from the changeset.\n *\n * @param changes the `LDFlagChangeset` from the ldClient onchange handler.\n * @param targetFlags if targetFlags are specified, changes to other flags are ignored and not returned in the\n * flattened `LDFlagSet`\n * @param reactOptions reactOptions.useCamelCaseFlagKeys determines whether to change the flag keys to camelCase\n * @return an `LDFlagSet` with the current flag values from the LDFlagChangeset filtered by `targetFlags`. The returned\n * object may be empty `{}` if none of the targetFlags were changed.\n */\n\nvar getFlattenedFlagsFromChangeset = function (changes, targetFlags, reactOptions) {\n  var flattened = {};\n\n  for (var key in changes) {\n    if (!targetFlags || targetFlags[key] !== undefined) {\n      // tslint:disable-next-line:no-unsafe-any\n      var flagKey = reactOptions.useCamelCaseFlagKeys ? (0, lodash_camelcase_1.default)(key) : key;\n      flattened[flagKey] = changes[key].current;\n    }\n  }\n\n  return flattened;\n};\n\nexports.getFlattenedFlagsFromChangeset = getFlattenedFlagsFromChangeset;\n/**\n * Retrieves flag values.\n *\n * @param ldClient LaunchDarkly client\n * @param reactOptions Initialization options for the LaunchDarkly React SDK\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n *\n * @returns an `LDFlagSet` with the current flag values from LaunchDarkly filtered by `targetFlags`.\n */\n\nvar fetchFlags = function (ldClient, reactOptions, targetFlags) {\n  if (reactOptions === void 0) {\n    reactOptions = types_1.defaultReactOptions;\n  }\n\n  var rawFlags = {};\n\n  if (targetFlags) {\n    for (var flag in targetFlags) {\n      rawFlags[flag] = ldClient.variation(flag, targetFlags[flag]);\n    }\n  } else {\n    rawFlags = ldClient.allFlags();\n  }\n\n  return reactOptions.useCamelCaseFlagKeys ? (0, exports.camelCaseKeys)(rawFlags) : rawFlags;\n};\n\nexports.fetchFlags = fetchFlags;\n/**\n * @deprecated The `camelCaseKeys.camelCaseKeys` property will be removed in a future version,\n * please update your code to use the `camelCaseKeys` function directly.\n */\n// tslint:disable-next-line deprecation\n\nexports.camelCaseKeys.camelCaseKeys = exports.camelCaseKeys;\nexports.default = {\n  camelCaseKeys: exports.camelCaseKeys,\n  getFlattenedFlagsFromChangeset: exports.getFlattenedFlagsFromChangeset,\n  fetchFlags: exports.fetchFlags\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AACA;AAEA;;;;;;;;;AAOO,IAAMA,aAAa,GAAG,UAACC,QAAD,EAAoB;EAC/C,IAAMC,KAAK,GAAc,EAAzB;;EACA,KAAK,IAAMC,OAAX,IAAsBF,QAAtB,EAAgC;IAC9B;IACA,IAAIE,OAAO,CAACC,OAAR,CAAgB,GAAhB,MAAyB,CAA7B,EAAgC;MAC9BF,KAAK,CAAC,gCAAUC,OAAV,CAAD,CAAL,GAA4BF,QAAQ,CAACE,OAAD,CAApC,CAD8B,CACiB;IAChD;EACF;;EAED,OAAOD,KAAP;AACD,CAVM;;AAAMG,wBAAaL,aAAb;AAYb;;;;;;;;;;;AAUO,IAAMM,8BAA8B,GAAG,UAC5CC,OAD4C,EAE5CC,WAF4C,EAG5CC,YAH4C,EAGhB;EAE5B,IAAMC,SAAS,GAAc,EAA7B;;EACA,KAAK,IAAMC,GAAX,IAAkBJ,OAAlB,EAA2B;IACzB,IAAI,CAACC,WAAD,IAAgBA,WAAW,CAACG,GAAD,CAAX,KAAqBC,SAAzC,EAAoD;MAClD;MACA,IAAMC,OAAO,GAAGJ,YAAY,CAACK,oBAAb,GAAoC,gCAAUH,GAAV,CAApC,GAAqDA,GAArE;MACAD,SAAS,CAACG,OAAD,CAAT,GAAqBN,OAAO,CAACI,GAAD,CAAP,CAAaI,OAAlC;IACD;EACF;;EAED,OAAOL,SAAP;AACD,CAfM;;AAAML,yCAA8BC,8BAA9B;AAiBb;;;;;;;;;;AASO,IAAMU,UAAU,GAAG,UACxBC,QADwB,EAExBR,YAFwB,EAGxBD,WAHwB,EAGD;EADvB;IAAAC,eAA+BS,2BAA/B;EAAkD;;EAGlD,IAAIjB,QAAQ,GAAc,EAA1B;;EAEA,IAAIO,WAAJ,EAAiB;IACf,KAAK,IAAMW,IAAX,IAAmBX,WAAnB,EAAgC;MAC9BP,QAAQ,CAACkB,IAAD,CAAR,GAAiBF,QAAQ,CAACG,SAAT,CAAmBD,IAAnB,EAAyBX,WAAW,CAACW,IAAD,CAApC,CAAjB;IACD;EACF,CAJD,MAIO;IACLlB,QAAQ,GAAGgB,QAAQ,CAACI,QAAT,EAAX;EACD;;EAED,OAAOZ,YAAY,CAACK,oBAAb,GAAoC,2BAAcb,QAAd,CAApC,GAA8DA,QAArE;AACD,CAhBM;;AAAMI,qBAAUW,UAAV;AAkBb;;;;AAIA;;AACAX,sBAAcL,aAAd,GAA8BK,qBAA9B;AAEAA,kBAAe;EAAEL,aAAa,uBAAf;EAAiBM,8BAA8B,wCAA/C;EAAiDU,UAAU;AAA3D,CAAf","names":["camelCaseKeys","rawFlags","flags","rawFlag","indexOf","exports","getFlattenedFlagsFromChangeset","changes","targetFlags","reactOptions","flattened","key","undefined","flagKey","useCamelCaseFlagKeys","current","fetchFlags","ldClient","types_1","flag","variation","allFlags"],"sources":["/Users/tpat/Desktop/launchdarkly/node_modules/launchdarkly-react-client-sdk/src/utils.ts"],"sourcesContent":["import { LDClient, LDFlagChangeset, LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport camelCase from 'lodash.camelcase';\nimport { defaultReactOptions, LDReactOptions } from './types';\n\n/**\n * Transforms a set of flags so that their keys are camelCased. This function ignores\n * flag keys which start with `$`.\n *\n * @param rawFlags A mapping of flag keys and their values\n * @return A transformed `LDFlagSet` with camelCased flag keys\n */\nexport const camelCaseKeys = (rawFlags: LDFlagSet) => {\n  const flags: LDFlagSet = {};\n  for (const rawFlag in rawFlags) {\n    // Exclude system keys\n    if (rawFlag.indexOf('$') !== 0) {\n      flags[camelCase(rawFlag)] = rawFlags[rawFlag]; // tslint:disable-line:no-unsafe-any\n    }\n  }\n\n  return flags;\n};\n\n/**\n * Gets the flags to pass to the provider from the changeset.\n *\n * @param changes the `LDFlagChangeset` from the ldClient onchange handler.\n * @param targetFlags if targetFlags are specified, changes to other flags are ignored and not returned in the\n * flattened `LDFlagSet`\n * @param reactOptions reactOptions.useCamelCaseFlagKeys determines whether to change the flag keys to camelCase\n * @return an `LDFlagSet` with the current flag values from the LDFlagChangeset filtered by `targetFlags`. The returned\n * object may be empty `{}` if none of the targetFlags were changed.\n */\nexport const getFlattenedFlagsFromChangeset = (\n  changes: LDFlagChangeset,\n  targetFlags: LDFlagSet | undefined,\n  reactOptions: LDReactOptions,\n): LDFlagSet => {\n  const flattened: LDFlagSet = {};\n  for (const key in changes) {\n    if (!targetFlags || targetFlags[key] !== undefined) {\n      // tslint:disable-next-line:no-unsafe-any\n      const flagKey = reactOptions.useCamelCaseFlagKeys ? camelCase(key) : key;\n      flattened[flagKey] = changes[key].current;\n    }\n  }\n\n  return flattened;\n};\n\n/**\n * Retrieves flag values.\n *\n * @param ldClient LaunchDarkly client\n * @param reactOptions Initialization options for the LaunchDarkly React SDK\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n *\n * @returns an `LDFlagSet` with the current flag values from LaunchDarkly filtered by `targetFlags`.\n */\nexport const fetchFlags = (\n  ldClient: LDClient,\n  reactOptions: LDReactOptions = defaultReactOptions,\n  targetFlags?: LDFlagSet,\n) => {\n  let rawFlags: LDFlagSet = {};\n\n  if (targetFlags) {\n    for (const flag in targetFlags) {\n      rawFlags[flag] = ldClient.variation(flag, targetFlags[flag]);\n    }\n  } else {\n    rawFlags = ldClient.allFlags();\n  }\n\n  return reactOptions.useCamelCaseFlagKeys ? camelCaseKeys(rawFlags) : rawFlags;\n};\n\n/**\n * @deprecated The `camelCaseKeys.camelCaseKeys` property will be removed in a future version,\n * please update your code to use the `camelCaseKeys` function directly.\n */\n// tslint:disable-next-line deprecation\ncamelCaseKeys.camelCaseKeys = camelCaseKeys;\n\nexport default { camelCaseKeys, getFlattenedFlagsFromChangeset, fetchFlags };\n"]},"metadata":{},"sourceType":"script"}